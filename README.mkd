attachEvents
============

Attach events, easily.


DESCRIPTION
-----------

   attachEvents(behaviors);

   'behaviors' is an object/hash/associative array that relates event types,
   specific keystrokes, and/or CSS-style element selectors to the actions they
   should trigger.

   No dependencies.


EXAMPLE
-------

attachEvents({

    // Attach to event types by name.
    'click': (event) => console.log("click received anywhere on the document."),

    // Attach actions to specific keypresses with single-letter property names.
    'o': (event) => console.log("The 'o' key has been pressed anywhere on the doc."),

    // Attach to specific elements with CSS selectors.
    'h1': {
        'click': (event) => event.target.innerHTML = "This is now the content of the clicked <h1> element.",
        'o'    : (event) => event.target.innerHTML = "This becomes the content of the <h1> when the 'o' key is pressed while the element is focused"
    },

    // Nest selectors for finer control.
    'ul.target': {
        'li': 'click': (event) => event.target.innerHTML = "This changes the content only of an <li> that is part of a <ul> with class 'target'.",
        'div': function(event) {
            event.target.innerHTML = "And this lets us attach different events to different parts of the <ul>, like a <div> within it."
        }
    }

});

TODO
----

* Improve demo with clear examples of each specific feature.

* Set 'this' to event.target?  Or provide some other easy shortcut for
  referring to the element specified by the most proximate selector.

* Forget automatically handling key mappings, and just instruct the user to
  nest them under 'keypressed'.  Currently, there is a conflict between using
  single-letter keys for 'keypressed', and single-letter elements, like <a>,
  or <i>.
  
